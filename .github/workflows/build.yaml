name: build

on:
  push:
  workflow_dispatch:
    inputs:
      board_name:
        description: Name of board to use for testing
        type: string
        required: false
      tf_a_repo:
        description: TF-A Git repository to use
        type: string
        required: false
      tf_a_ref:
        description: TF-A Git ref to use
        type: string
        required: false
      u_boot_repo:
        description: U-Boot Git repository to use
        type: string
        required: false
      u_boot_ref:
        description: U-Boot Git ref to use
        type: string
        required: false

jobs:
  vars:
    runs-on: ubuntu-20.04
    env:
      BOARD_NAME_WD: "${{ github.event.inputs.board_name }}"
      TF_A_REPO_WD: "${{ github.event.inputs.tf_a_repo }}"
      TF_A_REF_WD: "${{ github.event.inputs.tf_a_ref }}"
      U_BOOT_REPO_WD: "${{ github.event.inputs.u_boot_repo }}"
      U_BOOT_REF_WD: "${{ github.event.inputs.u_boot_ref }}"
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - id: resolve_vars
        name: Resolve variables
        run: scripts/resolve_vars.sh
    outputs:
      board_name: ${{ steps.resolve_vars.outputs.board_name }}
      tf_a_repo: ${{ steps.resolve_vars.outputs.tf_a_repo }}
      tf_a_ref: ${{ steps.resolve_vars.outputs.tf_a_ref }}
      u_boot_repo: ${{ steps.resolve_vars.outputs.u_boot_repo }}
      u_boot_ref: ${{ steps.resolve_vars.outputs.u_boot_ref }}

  build_tf_a:
    runs-on: ubuntu-20.04
    container: sigmaris/aarch64-linux-crossbuilder:latest
    env:
      WORKDIR: "${{ github.workspace }}/work"
      TF_A_REPO: ${{ needs.vars.outputs.tf_a_repo }}
      TF_A_REF: ${{ needs.vars.outputs.tf_a_ref }}
    needs: vars
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - name: Create working directory
        run: mkdir "$WORKDIR"
      
      - name: Clone TF-A
        run: scripts/clone_tfa.sh
      
      - name: Build TF-A
        id: build_tfa
        run: scripts/build_tfa.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: bl31
          path: ${{ steps.build_tfa.outputs.bl31 }}

  build_u_boot:
    runs-on: ubuntu-20.04
    container: sigmaris/aarch64-linux-crossbuilder:latest
    env:
      WORKDIR: "${{ github.workspace }}/work"
      U_BOOT_REPO: ${{ needs.vars.outputs.u_boot_repo }}
      U_BOOT_REF: ${{ needs.vars.outputs.u_boot_ref }}
    needs: [build_tf_a, vars]
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - name: Create working directory
        run: mkdir "$WORKDIR"

      - name: Download TF-A bl31.elf
        uses: actions/download-artifact@v2
        with:
          name: bl31
          path: "${{ github.workspace }}/work"

      - name: Clone U-Boot
        run: scripts/clone_uboot.sh
      
      - name: Build U-Boot
        id: build_uboot
        env:
          BL31: "${{ github.workspace }}/work/bl31.elf"
          TFTP_RUN_DIR: "${{ github.run_id }}"
        run: scripts/build_uboot.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: uboot
          path: |
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.mmc_idbloader }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.spi_idbloader }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.itb }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.emmc_test_scr }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.sd_test_scr }}
    outputs:
      mmc_idbloader: ${{ steps.build_uboot.outputs.mmc_idbloader }}
      spi_idbloader: ${{ steps.build_uboot.outputs.spi_idbloader }}
      itb: ${{ steps.build_uboot.outputs.itb }}
      emmc_test_scr: ${{ steps.build_uboot.outputs.emmc_test_scr }}
      sd_test_scr: ${{ steps.build_uboot.outputs.sd_test_scr }}
      tftp_run_dir: ${{ github.run_id }}

  deploy_tftp:
    runs-on: [self-hosted, tftp-server]
    needs: [build_u_boot, vars]
    steps:
      - name: Download u-boot binaries
        uses: actions/download-artifact@v2
        with:
          name: uboot
          path: uboot

      - name: Deploy u-boot binaries to TFTP server
        id: deploy
        run: |
          source ~/board_${{ needs.vars.outputs.board_name }}.conf
          TFTP_RUN_DIR="${TFTP_DIR}/${{ needs.build_u_boot.outputs.tftp_run_dir }}"
          mkdir -p "$TFTP_RUN_DIR"
          for uboot_file in \
            '${{ needs.build_u_boot.outputs.mmc_idbloader }}' \
            '${{ needs.build_u_boot.outputs.spi_idbloader }}' \
            '${{ needs.build_u_boot.outputs.itb }}' \
            '${{ needs.build_u_boot.outputs.emmc_test_scr }}' \
            '${{ needs.build_u_boot.outputs.sd_test_scr }}'
          do
            cp "uboot/${uboot_file}" "${TFTP_RUN_DIR}/${uboot_file}"
          done
          echo "::set-output name=full_tftp_run_dir::$TFTP_RUN_DIR"
    outputs:
      full_tftp_run_dir: ${{ steps.deploy.outputs.full_tftp_run_dir }}

  test_uboot:
    runs-on: [self-hosted, "${{ needs.vars.outputs.board_name }}-host"]
    needs: [build_u_boot, deploy_tftp, vars]
    concurrency: "board-${{ needs.vars.outputs.board_name }}"
    strategy:
      matrix:
        include:
          - type: emmc
            script: "${{ needs.build_u_boot.outputs.tftp_run_dir }}/${{ needs.build_u_boot.outputs.emmc_test_scr }}"
          - type: sdcard
            script: "${{ needs.build_u_boot.outputs.tftp_run_dir }}/${{ needs.build_u_boot.outputs.sd_test_scr }}"
        
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Run U-Boot test script
        run: scripts/agent.py --script '${{ matrix.script }}'

  cleanup_tftp:
    runs-on: [self-hosted, tftp-server]
    needs: [vars, deploy_tftp, test_uboot]
    if: ${{ always() }}
    steps:
      - name: Cleanup TFTP server
        run: |
          rm -rf '${{ needs.deploy_tftp.outputs.full_tftp_run_dir }}'
