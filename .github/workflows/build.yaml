name: build

on:
  push:
  workflow_dispatch:
    inputs:
      board_name:
        description: Name of board to use for testing
        type: string
        required: false
      tf_a_repo:
        description: TF-A Git repository to use
        type: string
        required: false
      tf_a_ref:
        description: TF-A Git ref to use
        type: string
        required: false
      u_boot_repo:
        description: U-Boot Git repository to use
        type: string
        required: false
      u_boot_ref:
        description: U-Boot Git ref to use
        type: string
        required: false
      linux_repo:
        description: Linux Git repository to use
        type: string
        required: false
      linux_ref:
        description: Linux Git ref to use
        type: string
        required: false
      deb_image_ver:
        description: Debian rootfs image version to use
        type: string
        required: false

jobs:
  vars:
    runs-on: ubuntu-20.04
    env:
      BOARD_NAME_WD: "${{ github.event.inputs.board_name }}"
      TF_A_REPO_WD: "${{ github.event.inputs.tf_a_repo }}"
      TF_A_REF_WD: "${{ github.event.inputs.tf_a_ref }}"
      U_BOOT_REPO_WD: "${{ github.event.inputs.u_boot_repo }}"
      U_BOOT_REF_WD: "${{ github.event.inputs.u_boot_ref }}"
      LINUX_REPO_WD: "${{ github.event.inputs.linux_repo }}"
      LINUX_REF_WD: "${{ github.event.inputs.linux_ref }}"
      DEB_IMAGE_VER_WD: "${{ github.event.inputs.deb_image_ver }}"
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - id: resolve_vars
        name: Resolve variables
        run: scripts/resolve_vars.sh
    outputs:
      board_name: ${{ steps.resolve_vars.outputs.board_name }}
      tf_a_repo: ${{ steps.resolve_vars.outputs.tf_a_repo }}
      tf_a_ref: ${{ steps.resolve_vars.outputs.tf_a_ref }}
      u_boot_repo: ${{ steps.resolve_vars.outputs.u_boot_repo }}
      u_boot_ref: ${{ steps.resolve_vars.outputs.u_boot_ref }}
      linux_repo: ${{ steps.resolve_vars.outputs.linux_repo }}
      linux_ref: ${{ steps.resolve_vars.outputs.linux_ref }}
      deb_image_ver: ${{ steps.resolve_vars.outputs.deb_image_ver }}

  build_tf_a:
    runs-on: ubuntu-20.04
    container: sigmaris/aarch64-linux-crossbuilder:latest
    env:
      WORKDIR: "${{ github.workspace }}/work"
      TF_A_REPO: ${{ needs.vars.outputs.tf_a_repo }}
      TF_A_REF: ${{ needs.vars.outputs.tf_a_ref }}
    needs: vars
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Create working directory
        run: mkdir "$WORKDIR"

      - name: Get cache key
        id: get_key
        run: |
          TF_A_CACHE_KEY="$(scripts/clone_tfa.sh get-cache-key)_$(scripts/build_tfa.sh get-cache-key)"
          echo "::set-output name=tf_a_cache_key::$TF_A_CACHE_KEY"

      - name: Cache TF-A
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ steps.get_key.outputs.tf_a_cache_key }}
          path: |
            work/arm-trusted-firmware/build/rk3399/debug/bl31/bl31.elf
            work/arm-trusted-firmware/build/rk3399/release/bl31/bl31.elf

      - name: Clone TF-A
        if: steps.cache.outputs.cache-hit != 'true'
        run: scripts/clone_tfa.sh
      
      - name: Build TF-A
        id: build_tfa
        run: scripts/build_tfa.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: bl31
          path: ${{ steps.build_tfa.outputs.bl31 }}

  build_u_boot:
    runs-on: ubuntu-20.04
    container: sigmaris/aarch64-linux-crossbuilder:latest
    env:
      WORKDIR: "${{ github.workspace }}/work"
      U_BOOT_REPO: ${{ needs.vars.outputs.u_boot_repo }}
      U_BOOT_REF: ${{ needs.vars.outputs.u_boot_ref }}
    needs: [build_tf_a, vars]
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - name: Create working directory
        run: mkdir "$WORKDIR"

      - name: Download TF-A bl31.elf
        uses: actions/download-artifact@v2
        with:
          name: bl31
          path: "${{ github.workspace }}/work"

      - name: Get cache key
        id: get_key
        run: |
          SOURCE_HASH="${{ hashFiles('scripts/build_uboot.sh', 'configs/ci-rockpro64-rk3399_defconfig', 'work/bl31.elf') }}"
          UBOOT_CACHE_KEY="$(scripts/clone_uboot.sh get-cache-key)_${SOURCE_HASH}"
          echo "::set-output name=uboot_cache_key::$UBOOT_CACHE_KEY"

      - name: Cache U-Boot
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ steps.get_key.outputs.uboot_cache_key }}
          path: work/u-boot/build

      - name: Clone U-Boot
        if: steps.cache.outputs.cache-hit != 'true'
        run: scripts/clone_uboot.sh
      
      - name: Build U-Boot
        id: build_uboot
        env:
          BL31: "${{ github.workspace }}/work/bl31.elf"
          TFTP_RUN_DIR: "${{ github.run_id }}"
        run: scripts/build_uboot.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: uboot
          path: |
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.mmc_idbloader }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.spi_idbloader }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.itb }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.emmc_test_scr }}
            ${{ steps.build_uboot.outputs.artifact_dir }}/${{ steps.build_uboot.outputs.sd_test_scr }}
    outputs:
      mmc_idbloader: ${{ steps.build_uboot.outputs.mmc_idbloader }}
      spi_idbloader: ${{ steps.build_uboot.outputs.spi_idbloader }}
      itb: ${{ steps.build_uboot.outputs.itb }}
      tftp_run_dir: ${{ github.run_id }}

  build_test_scripts:
    runs-on: ubuntu-20.04
    env:
      WORKDIR: "${{ github.workspace }}/work"
    needs: vars
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Create working directory
        run: mkdir "$WORKDIR"

      - name: Install required packages
        run: sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends u-boot-tools
      
      - name: Build test scripts
        id: build_scripts
        env:
          TFTP_RUN_DIR: "${{ github.run_id }}"
        run: scripts/build_test_scripts.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: testscripts
          path: |
            ${{ steps.build_scripts.outputs.artifact_dir }}/${{ steps.build_scripts.outputs.emmc_test_scr }}
            ${{ steps.build_scripts.outputs.artifact_dir }}/${{ steps.build_scripts.outputs.sd_test_scr }}
    outputs:
      emmc_test_scr: ${{ steps.build_scripts.outputs.emmc_test_scr }}
      sd_test_scr: ${{ steps.build_scripts.outputs.sd_test_scr }}
      bootlinux_scr: ${{ steps.build_scripts.outputs.bootlinux_scr }}

  cached_debian_image:
    runs-on: ubuntu-20.04
    env:
      WORKDIR: "${{ github.workspace }}/work"
      LINUX_REPO: ${{ needs.vars.outputs.linux_repo }}
      LINUX_REF: ${{ needs.vars.outputs.linux_ref }}
    needs: vars
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Create working directory
        run: mkdir "$WORKDIR"

      - name: Get cache key
        id: get_key
        run: |
          SOURCE_HASH="${{ hashFiles('scripts/build_linux.sh', 'scripts/overlay_kernel_image.sh', 'configs/rockpro64_linux_defconfig') }}"
          IMAGE_CACHE_KEY="$( (scripts/clone_linux.sh get-cache-key; printf '%s %s' "$SOURCE_HASH" '${{ needs.vars.outputs.deb_image_ver }}') | sha256sum | cut -d ' ' -f 1)"
          echo "::set-output name=image_cache_key::$IMAGE_CACHE_KEY"

      - name: Try retrieving cached image layer
        id: cache
        uses: actions/cache@v3
        with:
          # Use a always-unique key to ensure primary key is never hit and so saved cache from this step is never used
          key: ${{ github.workflow }}_${{ github.run_id }}_${{ github.run_attempt }}
          restore-keys: ${{ steps.get_key.outputs.image_cache_key }}
          path: |
            debian-11-generic-arm64-${{ needs.vars.outputs.deb_image_ver }}.qcow2.snapshot
            bootfiles/*
      
      - name: Check if cache is valid
        id: check_cache
        run: |
          for expected in debian-11-generic-arm64-${{ needs.vars.outputs.deb_image_ver }}.qcow2.snapshot \
            bootfiles/vmlinuz-* bootfiles/initrd.img-* bootfiles/rk3399-rockpro64.dtb
          do
            if [[ ! -f "$expected" ]]
            then
              echo "::set-output name=is_valid::false"
              exit 0
            fi
          done
          echo "::set-output name=is_valid::true"

      - name: Upload cached image layer
        if: steps.check_cache.outputs.is_valid == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: imagelayer
          path: debian-11-generic-arm64-${{ needs.vars.outputs.deb_image_ver }}.qcow2.snapshot

      - name: Upload cached bootfiles
        if: steps.check_cache.outputs.is_valid == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: bootfiles
          path: bootfiles/*

    outputs:
      image_cache_key: ${{ steps.get_key.outputs.image_cache_key }}
      cache_is_valid: ${{ steps.check_cache.outputs.is_valid }}

  build_linux:
    runs-on: ubuntu-20.04
    container: sigmaris/aarch64-linux-crossbuilder:latest
    env:
      WORKDIR: "${{ github.workspace }}/work"
      LINUX_REPO: ${{ needs.vars.outputs.linux_repo }}
      LINUX_REF: ${{ needs.vars.outputs.linux_ref }}
    needs: [cached_debian_image, vars]
    if: needs.cached_debian_image.outputs.cache_is_valid != 'true'
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Create working directory
        run: mkdir "$WORKDIR"

      - name: Get cache key
        id: get_key
        run: |
          SOURCE_HASH="${{ hashFiles('scripts/build_linux.sh', 'configs/rockpro64_linux_defconfig') }}"
          LINUX_CACHE_KEY="$(scripts/clone_linux.sh get-cache-key)_${SOURCE_HASH}"
          echo "::set-output name=linux_cache_key::$LINUX_CACHE_KEY"

      - name: Cache Linux
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ steps.get_key.outputs.linux_cache_key }}
          path: work/linux-*.deb

      - name: Clone Linux
        if: steps.cache.outputs.cache-hit != 'true'
        run: scripts/clone_linux.sh
      
      - name: Build Linux
        id: build_linux
        run: scripts/build_linux.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linuxdebs
          path: work/linux-*.deb
    outputs:
      linux_image_deb: ${{ steps.build_linux.outputs.linux_image_deb }}
      kdeb_pkgversion: ${{ steps.build_linux.outputs.kdeb_pkgversion }}

  prepare_image:
    runs-on: ubuntu-20.04
    needs: [cached_debian_image, build_linux, vars]
    if: needs.cached_debian_image.outputs.cache_is_valid != 'true'
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Cache image layer and bootfiles
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ needs.cached_debian_image.outputs.image_cache_key }}
          path: |
            debian-11-generic-arm64-${{ needs.vars.outputs.deb_image_ver }}.qcow2.snapshot
            bootfiles/*

      - name: Install required packages
        run: >
          sudo apt-get -y update &&
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends
          binfmt-support parted qemu-utils qemu-user-static systemd-container

      - name: Download Linux packages
        uses: actions/download-artifact@v2
        with:
          name: linuxdebs
          path: linuxdebs

      - name: Download Debian image
        env:
          IMG_VER: "${{ needs.vars.outputs.deb_image_ver }}"
        run: >
          curl --location --output debian-11-generic-arm64-${IMG_VER}.qcow2
          "https://cloud.debian.org/images/cloud/bullseye/${IMG_VER}/debian-11-generic-arm64-${IMG_VER}.qcow2"

      - name: Overlay kernel on Debian image and extract kernel and built initramfs
        env:
          IMG_VER: "${{ needs.vars.outputs.deb_image_ver }}"
        run: >
          mkdir bootfiles &&
          scripts/overlay_kernel_image.sh debian-11-generic-arm64-${IMG_VER}.qcow2
          'linuxdebs/${{ needs.build_linux.outputs.linux_image_deb }}'
          '${{ needs.build_linux.outputs.kdeb_pkgversion }}'
          bootfiles

      - name: Upload image layer
        uses: actions/upload-artifact@v3
        with:
          name: imagelayer
          path: debian-11-generic-arm64-${{ needs.vars.outputs.deb_image_ver }}.qcow2.snapshot

      - name: Upload bootfiles
        uses: actions/upload-artifact@v3
        with:
          name: bootfiles
          path: bootfiles/*

  deploy_tftp:
    runs-on: [self-hosted, tftp-server]
    needs: [build_u_boot, build_test_scripts, cached_debian_image, prepare_image, vars]
    steps:
      - name: Download u-boot binaries
        uses: actions/download-artifact@v2
        with:
          name: uboot
          path: uboot

      - name: Download test scripts
        uses: actions/download-artifact@v2
        with:
          name: testscripts
          path: testscripts

      - name: Download boot files
        uses: actions/download-artifact@v2
        with:
          name: bootfiles
          path: bootfiles

      - name: Deploy binaries to TFTP server
        id: deploy
        run: |
          source ~/board_${{ needs.vars.outputs.board_name }}.conf
          TFTP_RUN_DIR="${TFTP_DIR}/${{ needs.build_u_boot.outputs.tftp_run_dir }}"
          mkdir -p "$TFTP_RUN_DIR"
          for uboot_file in \
            '${{ needs.build_u_boot.outputs.mmc_idbloader }}' \
            '${{ needs.build_u_boot.outputs.spi_idbloader }}' \
            '${{ needs.build_u_boot.outputs.itb }}'
          do
            cp "uboot/${uboot_file}" "${TFTP_RUN_DIR}/${uboot_file}"
          done
          for test_script in \
            '${{ needs.build_test_scripts.outputs.emmc_test_scr }}' \
            '${{ needs.build_test_scripts.outputs.sd_test_scr }}' \
            '${{ needs.build_test_scripts.outputs.bootlinux_scr }}'
          do
            cp "testscripts/${test_script}" "${TFTP_RUN_DIR}/${test_script}"
          done
          cp bootfiles/initrd.img-* "${TFTP_RUN_DIR}/initrd.img"
          cp bootfiles/vmlinuz-* "${TFTP_RUN_DIR}/vmlinuz"
          cp bootfiles/rk3399-rockpro64.dtb "${TFTP_RUN_DIR}/rk3399-rockpro64.dtb"
          echo "::set-output name=full_tftp_run_dir::$TFTP_RUN_DIR"
    outputs:
      full_tftp_run_dir: ${{ steps.deploy.outputs.full_tftp_run_dir }}

  test_uboot:
    runs-on: [self-hosted, "${{ needs.vars.outputs.board_name }}-host"]
    needs: [build_u_boot, build_test_scripts, deploy_tftp, vars]
    concurrency: "board-${{ needs.vars.outputs.board_name }}"
    strategy:
      matrix:
        include:
          - type: emmc
            script: "${{ needs.build_u_boot.outputs.tftp_run_dir }}/${{ needs.build_test_scripts.outputs.emmc_test_scr }}"
          - type: sdcard
            script: "${{ needs.build_u_boot.outputs.tftp_run_dir }}/${{ needs.build_test_scripts.outputs.sd_test_scr }}"

    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Run U-Boot test script
        run: scripts/agent.py --script '${{ matrix.script }}'

  cleanup_tftp:
    runs-on: [self-hosted, tftp-server]
    needs: [vars, deploy_tftp, test_uboot]
    if: ${{ always() }}
    steps:
      - name: Cleanup TFTP server
        run: |
          rm -rf '${{ needs.deploy_tftp.outputs.full_tftp_run_dir }}'
